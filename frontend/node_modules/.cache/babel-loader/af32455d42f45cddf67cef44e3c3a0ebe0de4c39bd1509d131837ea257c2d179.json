{"ast":null,"code":"/**\n * AstroBot API Service\n * Handles all communication with the backend API\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass AstroBotAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Send a chat message to the backend\n   * @param {string} message - User message\n   * @param {Object} chartData - Optional chart data (for context)\n   * @returns {Promise<Object>} API response\n   */\n  async sendChatMessage(message, chartData = null) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 40000);\n      const response = await fetch(`${this.baseURL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message,\n          chart_data: chartData\n        }),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending chat message (attempt 1):', error);\n      // Retry once with minimal payload (no chart context) and fresh controller\n      try {\n        const controller2 = new AbortController();\n        const timeout2 = setTimeout(() => controller2.abort(), 40000);\n        const response2 = await fetch(`${this.baseURL}/api/chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            message\n          }),\n          signal: controller2.signal\n        });\n        clearTimeout(timeout2);\n        if (!response2.ok) {\n          throw new Error(`HTTP error! status: ${response2.status}`);\n        }\n        return await response2.json();\n      } catch (fallbackError) {\n        console.error('Error sending chat message (fallback):', fallbackError);\n        throw fallbackError;\n      }\n    }\n  }\n\n  /**\n   * Generate Kundli chart\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Kundli data\n   */\n  async generateKundli(birthDetails) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 30000);\n      const response = await fetch(`${this.baseURL}/api/kundli`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(birthDetails),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n      if (!response.ok) {\n        // Try to include server error details for better debugging\n        let serverMessage = '';\n        try {\n          const errJson = await response.json();\n          serverMessage = (errJson === null || errJson === void 0 ? void 0 : errJson.error) || (errJson === null || errJson === void 0 ? void 0 : errJson.message) || '';\n        } catch (_) {\n          try {\n            serverMessage = await response.text();\n          } catch (_) {}\n        }\n        const detail = serverMessage ? ` - ${serverMessage}` : '';\n        throw new Error(`HTTP error! status: ${response.status}${detail}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate visual chart only\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Chart data\n   */\n  async generateChart(birthDetails) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 30000);\n      const response = await fetch(`${this.baseURL}/api/chart`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(birthDetails),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n      if (!response.ok) {\n        let serverMessage = '';\n        try {\n          const errJson = await response.json();\n          serverMessage = (errJson === null || errJson === void 0 ? void 0 : errJson.error) || (errJson === null || errJson === void 0 ? void 0 : errJson.message) || '';\n        } catch (_) {\n          try {\n            serverMessage = await response.text();\n          } catch (_) {}\n        }\n        const detail = serverMessage ? ` - ${serverMessage}` : '';\n        throw new Error(`HTTP error! status: ${response.status}${detail}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating chart:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze chart data\n   * @param {Object} chartData - Chart data to analyze\n   * @returns {Promise<Object>} Analysis result\n   */\n  async analyzeKundli(chartData) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 20000);\n      const response = await fetch(`${this.baseURL}/api/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chart_data: chartData\n        }),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send form data to backend to store in Google Sheets\n   * @param {Object} formData - {name, dob, tob, place, timezone}\n   */\n  async sendFormData(formData) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 15000);\n      const response = await fetch(`${this.baseURL}/api/form-submit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`Form submit failed: ${response.status} ${text}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error submitting form data:', error);\n      // Don't throw hard error to avoid blocking UX; return {success:false}\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get coordinates for a place\n   * @param {string} place - Place name\n   * @returns {Promise<Object>} Coordinates data\n   */\n  async getCoordinates(place) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/coordinates/${encodeURIComponent(place)}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if the backend is healthy\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export API instance\nconst astroBotAPI = new AstroBotAPI();\nexport default astroBotAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AstroBotAPI","constructor","baseURL","sendChatMessage","message","chartData","controller","AbortController","timeout","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","chart_data","signal","clearTimeout","ok","Error","status","json","error","console","controller2","timeout2","response2","fallbackError","generateKundli","birthDetails","serverMessage","errJson","_","text","detail","generateChart","analyzeKundli","sendFormData","formData","success","getCoordinates","place","encodeURIComponent","checkHealth","astroBotAPI"],"sources":["D:/Downloads/astro-main/frontend/src/services/api.js"],"sourcesContent":["/**\n * AstroBot API Service\n * Handles all communication with the backend API\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass AstroBotAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Send a chat message to the backend\n   * @param {string} message - User message\n   * @param {Object} chartData - Optional chart data (for context)\n   * @returns {Promise<Object>} API response\n   */\n  async sendChatMessage(message, chartData = null) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 40000);\n      const response = await fetch(`${this.baseURL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: message,\n          chart_data: chartData\n        }),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending chat message (attempt 1):', error);\n      // Retry once with minimal payload (no chart context) and fresh controller\n      try {\n        const controller2 = new AbortController();\n        const timeout2 = setTimeout(() => controller2.abort(), 40000);\n        const response2 = await fetch(`${this.baseURL}/api/chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ message }),\n          signal: controller2.signal\n        });\n        clearTimeout(timeout2);\n        if (!response2.ok) {\n          throw new Error(`HTTP error! status: ${response2.status}`);\n        }\n        return await response2.json();\n      } catch (fallbackError) {\n        console.error('Error sending chat message (fallback):', fallbackError);\n        throw fallbackError;\n      }\n    }\n  }\n\n  /**\n   * Generate Kundli chart\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Kundli data\n   */\n  async generateKundli(birthDetails) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 30000);\n      const response = await fetch(`${this.baseURL}/api/kundli`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(birthDetails),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        // Try to include server error details for better debugging\n        let serverMessage = '';\n        try {\n          const errJson = await response.json();\n          serverMessage = errJson?.error || errJson?.message || '';\n        } catch (_) {\n          try { serverMessage = await response.text(); } catch (_) {}\n        }\n        const detail = serverMessage ? ` - ${serverMessage}` : '';\n        throw new Error(`HTTP error! status: ${response.status}${detail}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate visual chart only\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Chart data\n   */\n  async generateChart(birthDetails) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 30000);\n      const response = await fetch(`${this.baseURL}/api/chart`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(birthDetails),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        let serverMessage = '';\n        try {\n          const errJson = await response.json();\n          serverMessage = errJson?.error || errJson?.message || '';\n        } catch (_) {\n          try { serverMessage = await response.text(); } catch (_) {}\n        }\n        const detail = serverMessage ? ` - ${serverMessage}` : '';\n        throw new Error(`HTTP error! status: ${response.status}${detail}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating chart:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze chart data\n   * @param {Object} chartData - Chart data to analyze\n   * @returns {Promise<Object>} Analysis result\n   */\n  async analyzeKundli(chartData) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 20000);\n      const response = await fetch(`${this.baseURL}/api/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chart_data: chartData\n        }),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send form data to backend to store in Google Sheets\n   * @param {Object} formData - {name, dob, tob, place, timezone}\n   */\n  async sendFormData(formData) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), 15000);\n      const response = await fetch(`${this.baseURL}/api/form-submit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n        signal: controller.signal\n      });\n      clearTimeout(timeout);\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`Form submit failed: ${response.status} ${text}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error submitting form data:', error);\n      // Don't throw hard error to avoid blocking UX; return {success:false}\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get coordinates for a place\n   * @param {string} place - Place name\n   * @returns {Promise<Object>} Coordinates data\n   */\n  async getCoordinates(place) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/coordinates/${encodeURIComponent(place)}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if the backend is healthy\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export API instance\nconst astroBotAPI = new AstroBotAPI();\nexport default astroBotAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}