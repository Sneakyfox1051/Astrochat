{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\astro-main\\\\frontend\\\\src\\\\components\\\\ExpandableChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpandableChat = ({\n  isOpen,\n  onClose,\n  onRefresh\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Namaste! 🙏 Main Pandit ji hun. Chaliye step-by-step aapka Kundli banate hain.\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }, {\n    id: 2,\n    text: \"Pehle aapka naam batayiye (e.g., Mera naam Rajesh hai).\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([{\n          id: 1,\n          text: \"Namaste! 🙏 Main Pandit ji hun. Chaliye step-by-step aapka Kundli banate hain.\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }, {\n          id: 2,\n          text: \"Pehle aapka naam batayiye (e.g., Mera naam Rajesh hai).\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n\n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n\n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: 'smooth'\n      });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = text => {\n    const patterns = [/(?:mera\\s+naam|m\\s*e\\s*r\\s*a\\s*\\s*naam|my\\s+name\\s+is|i\\s*am|i'm|main)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)/i, /^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/];\n    for (const p of patterns) {\n      const m = text.match(p);\n      if (m) return m[1].trim();\n    }\n    return null;\n  };\n  const parseDob = text => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const monthShort = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2, '0')}-${m[3].padStart(2, '0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1], 10),\n        b = parseInt(m[2], 10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a;\n      const month = b;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 ? monthNames.indexOf(m[2].toLowerCase()) + 1 : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${m[1].padStart(2, '0')}`;\n    }\n    return null;\n  };\n  const parseTob = text => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1], 10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = m[4] || m[3] || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2, '0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n  const parsePlace = text => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n  const isValidDate = yyyyMmDd => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n  const isValidTime = hhmmss => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and Chart\n  const generateKundli = async () => {\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    try {\n      const birthDetails = {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n\n      // Generate both chart and kundli data in parallel\n      const [chartResponse, kundliResponse] = await Promise.all([astroBotAPI.generateChart(birthDetails), astroBotAPI.generateKundli(birthDetails)]);\n      if (chartResponse.success && chartResponse.chart_data) {\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n      }\n      if (kundliResponse.success && kundliResponse.chart_data) {\n        setKundliData(kundliResponse.chart_data);\n        setCurrentStep('chart_generated');\n\n        // Add Kundli generation success message\n        const successMessage = {\n          id: nextMessageId(),\n          text: `🎉 ${userProfile.name} ji, aapka Kundli chart taiyar hai! Ab aap koi bhi sawal puch sakte hain - grah ki sthiti, dasha, yog, ya koi bhi astrological prediction ke bare mein.`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, successMessage]);\n      } else {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      try {\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setMessages(prev => [...prev, typingMessage]);\n\n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              name\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = {\n              ...userProfile,\n              dob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              tob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              place\n            };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n            setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n              id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            await generateKundli();\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = {\n              ...userProfile\n            };\n            if (field === 'name' || field === 'naam') updated.name = value;else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob;else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob;else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place;else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartData);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n      } catch (error) {\n        console.error('Error sending message:', error);\n\n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `expandable-chat-container ${isOpen ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pandit-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-avatar-small\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status\",\n            children: \"Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [message.sender === 'pandit' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: message.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(KundliChart, {\n        chartData: chartData,\n        onChartReady: () => {\n          // Chart is ready, no need for additional message\n          console.log('Chart loaded successfully');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this), (isGeneratingKundli || isGeneratingChart) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kundli-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDD2E Aapka Kundli chart generate ho raha hai... Kripya wait karein\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: currentStep === 'greeting' || currentStep === 'collecting_details' ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\" : \"Apna sawal yahan likhein...\",\n          className: \"message-input\",\n          disabled: isGeneratingKundli\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          disabled: isGeneratingKundli,\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            className: \"send-icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L11 13\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L15 22L11 13L2 9L22 2Z\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), (currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setEditMode(prev => !prev);\n            if (!editMode) {\n              // entering edit mode: show current details\n              const m = {\n                id: messages.length + 1,\n                text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                sender: 'pandit',\n                timestamp: new Date().toLocaleTimeString()\n              };\n              setMessages(prev => [...prev, m]);\n            }\n          },\n          className: \"send-button\",\n          style: {\n            marginLeft: 8\n          },\n          children: editMode ? 'Done' : 'Edit details'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpandableChat, \"LTF7FN2ZAYfPhYywQoMLgD6enJA=\");\n_c = ExpandableChat;\nexport default ExpandableChat;\nvar _c;\n$RefreshReg$(_c, \"ExpandableChat\");","map":{"version":3,"names":["React","useState","astroBotAPI","KundliChart","jsxDEV","_jsxDEV","ExpandableChat","isOpen","onClose","onRefresh","_s","messages","setMessages","id","text","sender","timestamp","Date","toLocaleTimeString","inputText","setInputText","userProfile","setUserProfile","name","dob","tob","place","timezone","kundliData","setKundliData","chartData","setChartData","isGeneratingKundli","setIsGeneratingKundli","isGeneratingChart","setIsGeneratingChart","currentStep","setCurrentStep","messagesEndRef","useRef","editMode","setEditMode","messageIdRef","nextMessageId","current","useEffect","resetMessages","handleRefresh","window","addEventListener","removeEventListener","_messagesEndRef$curre","scrollIntoView","behavior","e","parseName","patterns","p","m","match","trim","parseDob","monthNames","monthShort","padStart","a","parseInt","b","day","month","toString","indexOf","toLowerCase","parseTob","hour","minute","sec","period","test","parsePlace","m2","isValidDate","yyyyMmDd","d","isNaN","getTime","isValidTime","hhmmss","isProfileComplete","generateKundli","birthDetails","chartResponse","kundliResponse","Promise","all","generateChart","success","chart_data","successMessage","prev","Error","error","console","errorMessage","handleSendMessage","newMessage","currentInput","typingMessage","isTyping","botText","correction","updated","filter","msg","concat","change","field","value","response","sendChatMessage","withoutTyping","errorResponse","handleKeyPress","key","className","children","src","require","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","message","ref","onChartReady","log","type","onChange","target","onKeyPress","placeholder","disabled","onClick","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","length","style","marginLeft","_c","$RefreshReg$"],"sources":["D:/Downloads/astro-main/frontend/src/components/ExpandableChat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\n\nconst ExpandableChat = ({ isOpen, onClose, onRefresh }) => {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Namaste! 🙏 Main Pandit ji hun. Chaliye step-by-step aapka Kundli banate hain.\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    },\n    {\n      id: 2,\n      text: \"Pehle aapka naam batayiye (e.g., Mera naam Rajesh hai).\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    }\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([\n          {\n            id: 1,\n            text: \"Namaste! 🙏 Main Pandit ji hun. Chaliye step-by-step aapka Kundli banate hain.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          },\n          {\n            id: 2,\n            text: \"Pehle aapka naam batayiye (e.g., Mera naam Rajesh hai).\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }\n        ]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n      \n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n      \n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      \n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = (text) => {\n    const patterns = [\n      /(?:mera\\s+naam|m\\s*e\\s*r\\s*a\\s*\\s*naam|my\\s+name\\s+is|i\\s*am|i'm|main)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)/i,\n      /^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/\n    ];\n    for (const p of patterns) {\n      const m = text.match(p);\n      if (m) return m[1].trim();\n    }\n    return null;\n  };\n\n  const parseDob = (text) => {\n    const monthNames = ['january','february','march','april','may','june','july','august','september','october','november','december'];\n    const monthShort = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2,'0')}-${m[3].padStart(2,'0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1],10), b = parseInt(m[2],10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a; const month = b;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${day.toString().padStart(2,'0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 \n        ? monthNames.indexOf(m[2].toLowerCase()) + 1\n        : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${m[1].padStart(2,'0')}`;\n    }\n    return null;\n  };\n\n  const parseTob = (text) => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1],10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = (m[4] || m[3]) || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2,'0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n\n  const parsePlace = (text) => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n\n  const isValidDate = (yyyyMmDd) => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n\n  const isValidTime = (hhmmss) => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and Chart\n  const generateKundli = async () => {\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    \n    try {\n      const birthDetails = {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n      \n      // Generate both chart and kundli data in parallel\n      const [chartResponse, kundliResponse] = await Promise.all([\n        astroBotAPI.generateChart(birthDetails),\n        astroBotAPI.generateKundli(birthDetails)\n      ]);\n      \n      if (chartResponse.success && chartResponse.chart_data) {\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n      }\n      \n      if (kundliResponse.success && kundliResponse.chart_data) {\n        setKundliData(kundliResponse.chart_data);\n        setCurrentStep('chart_generated');\n        \n        // Add Kundli generation success message\n        const successMessage = {\n          id: nextMessageId(),\n          text: `🎉 ${userProfile.name} ji, aapka Kundli chart taiyar hai! Ab aap koi bhi sawal puch sakte hain - grah ki sthiti, dasha, yog, ya koi bhi astrological prediction ke bare mein.`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, successMessage]);\n      } else {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      \n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      \n      try {\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setMessages(prev => [...prev, typingMessage]);\n        \n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = { ...userProfile, name };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = { ...userProfile, dob };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = { ...userProfile, tob };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = { ...userProfile, place };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n        setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n          id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            await generateKundli();\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = { ...userProfile };\n            if (field === 'name' || field === 'naam') updated.name = value;\n            else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob; else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob; else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place; else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartData);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n        \n      } catch (error) {\n        console.error('Error sending message:', error);\n        \n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className={`expandable-chat-container ${isOpen ? 'expanded' : ''}`}>\n      {/* Chat Header */}\n      <div className=\"chat-header\">\n        <div className=\"pandit-info\">\n          <div className=\"pandit-avatar-small\">\n            <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n          </div>\n          <div className=\"pandit-details\">\n            <h3>Pandit ji</h3>\n            <span className=\"status\">Online</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"messages-container\">\n        {messages.map((message) => (\n          <div key={message.id} className={`message ${message.sender}`}>\n            {message.sender === 'pandit' && (\n              <div className=\"message-avatar\">\n                <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n              </div>\n            )}\n            <div className=\"message-content\">\n              <div className=\"message-bubble\">\n                <p>{message.text}</p>\n                <span className=\"message-time\">{message.timestamp}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n        \n        {/* Kundli Chart Display */}\n        {chartData && (\n          <KundliChart \n            chartData={chartData} \n            onChartReady={() => {\n              // Chart is ready, no need for additional message\n              console.log('Chart loaded successfully');\n            }}\n          />\n        )}\n        \n        {/* Loading indicator for Kundli generation */}\n        {(isGeneratingKundli || isGeneratingChart) && (\n          <div className=\"kundli-loading\">\n            <div className=\"loading-spinner\"></div>\n            <p>🔮 Aapka Kundli chart generate ho raha hai... Kripya wait karein</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"input-container\">\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={\n              currentStep === 'greeting' || currentStep === 'collecting_details'\n                ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\"\n                : \"Apna sawal yahan likhein...\"\n            }\n            className=\"message-input\"\n            disabled={isGeneratingKundli}\n          />\n          <button \n            onClick={handleSendMessage} \n            className=\"send-button\"\n            disabled={isGeneratingKundli}\n          >\n            <svg viewBox=\"0 0 24 24\" className=\"send-icon\">\n              <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n              <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </button>\n          {(currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && (\n            <button\n              onClick={() => {\n                setEditMode((prev) => !prev);\n                if (!editMode) {\n                  // entering edit mode: show current details\n                  const m = {\n                    id: messages.length + 1,\n                    text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                    sender: 'pandit',\n                    timestamp: new Date().toLocaleTimeString()\n                  };\n                  setMessages((prev) => [...prev, m]);\n                }\n              }}\n              className=\"send-button\"\n              style={{ marginLeft: 8 }}\n            >\n              {editMode ? 'Done' : 'Edit details'}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpandableChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}