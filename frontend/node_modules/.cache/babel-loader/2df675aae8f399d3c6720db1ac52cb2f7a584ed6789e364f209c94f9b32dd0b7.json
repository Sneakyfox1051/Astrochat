{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\astro-main\\\\frontend\\\\src\\\\components\\\\ExpandableChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpandableChat = ({\n  isOpen,\n  onClose,\n  onRefresh,\n  userData\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }, {\n    id: 2,\n    text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n  const [isBotTyping, setIsBotTyping] = useState(false);\n  // Ensure chart is generated only once per chat session\n  const hasGeneratedRef = React.useRef(false);\n  const generationTimerRef = React.useRef(null);\n\n  // When userData is provided (from the modal form), greet the user by name and prefill profile\n  React.useEffect(() => {\n    if (userData && userData.name) {\n      // Clear any previous chart on a new session start\n      setChartData(null);\n      setKundliData(null);\n      setUserProfile(prev => ({\n        ...prev,\n        name: userData.name,\n        dob: userData.dob || prev.dob,\n        tob: userData.tob || prev.tob,\n        place: userData.place || prev.place,\n        timezone: userData.timezone || prev.timezone\n      }));\n\n      // Personalized spiritual greeting\n      setMessages([{\n        id: 1,\n        text: `Jai Shri Ram 🙏 ${userData.name} ji, swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon. Aap kaise hain?`,\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: 2,\n        text: \"Main abhi aapka Kundli chart taiyar kar raha hun... Kripya thoda wait karein, grahon ki sthiti dekhni hai.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n      const haveAll = userData.dob && userData.tob && userData.place;\n      if (haveAll) {\n        // Auto-generate chart when all details are available\n        if (!hasGeneratedRef.current) {\n          setCurrentStep('generating');\n          const details = {\n            name: userData.name,\n            dob: userData.dob,\n            tob: userData.tob,\n            place: userData.place,\n            timezone: userData.timezone || 'Asia/Kolkata'\n          };\n          // Mark as generating immediately to avoid duplicate triggers in Strict Mode\n          hasGeneratedRef.current = true;\n          if (generationTimerRef.current) clearTimeout(generationTimerRef.current);\n          generationTimerRef.current = setTimeout(() => {\n            generateKundli(details);\n          }, 150);\n        }\n      } else {\n        setCurrentStep('ask_dob');\n      }\n    }\n  }, [userData]);\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([{\n          id: 1,\n          text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }, {\n          id: 2,\n          text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setChartData(null);\n        if (generationTimerRef.current) {\n          clearTimeout(generationTimerRef.current);\n          generationTimerRef.current = null;\n        }\n        hasGeneratedRef.current = false;\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n\n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n\n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: 'smooth'\n      });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // Auto-focus input when chat opens or bot finished typing\n  React.useEffect(() => {\n    if (isOpen && !isBotTyping && !isGeneratingKundli) {\n      try {\n        var _inputRef$current;\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      } catch (e) {}\n    }\n  }, [isOpen, isBotTyping, isGeneratingKundli]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = text => {\n    const input = text.trim();\n    const cleanup = raw => {\n      if (!raw) return null;\n      // Remove trailing Hindi copula words like 'hai', 'hun', 'hu'\n      let name = raw.replace(/\\b(hai|hun|hu|hoon)\\b\\.?$/i, '').trim();\n      // Remove trailing punctuation\n      name = name.replace(/[.,;:!?]+$/g, '').trim();\n      // Collapse multiple spaces\n      name = name.replace(/\\s{2,}/g, ' ');\n      return name || null;\n    };\n\n    // 1) \"mera naam <name> hai\" (common Hindi pattern)\n    let m = input.match(/(?:^|\\b)mera\\s+naam\\s+([a-zA-Z][a-zA-Z\\s'.-]*?)(?:\\s+(?:hai|hun|hu|hoon))?\\b/i);\n    if (m) return cleanup(m[1]);\n\n    // 2) \"my name is <name>\"\n    m = input.match(/(?:^|\\b)my\\s+name\\s+is\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 3) \"I am <name>\" or \"I'm <name>\"\n    m = input.match(/^(?:i\\s*am|i'm)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 4) Bare name fallback (single or multi-word letters only)\n    m = input.match(/^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/);\n    if (m) return cleanup(m[1]);\n    return null;\n  };\n  const parseDob = text => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const monthShort = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2, '0')}-${m[3].padStart(2, '0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1], 10),\n        b = parseInt(m[2], 10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a;\n      const month = b;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 ? monthNames.indexOf(m[2].toLowerCase()) + 1 : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${m[1].padStart(2, '0')}`;\n    }\n    return null;\n  };\n  const parseTob = text => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1], 10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = m[4] || m[3] || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2, '0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n  const parsePlace = text => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n\n  // Pick relevant follow-up prompts based on the latest user intent\n  const selectFollowUps = (userText, context = {}) => {\n    const text = (userText || '').toLowerCase();\n    const topics = [];\n    const push = arr => arr[Math.floor(Math.random() * arr.length)];\n    const sets = {\n      marriage: ['Aapke shaadi ke yog ke baare mein aur detail chahiye?', 'Kya rishta ki baat chal rahi hai filhaal?', 'Shaadi timeline ke baare mein specific sawal puchna chahenge?'],\n      career: ['Aap kaam kis field mein karte hain?', 'Job change ya promotion ka soch rahe hain?', 'Business/Startup ko lekar koi specific sawal hai?'],\n      health: ['Health ke kaunse area ko lekar chinta hai?', 'Lifestyle/discipline ke baare mein guidance chahiye?', 'Koi chronic issue hai jiske upchar chahte hain?'],\n      finance: ['Investment ko lekar aapka plan kya hai?', 'Savings ya expenses control par sawal hai?', 'Business finance ya income growth par guidance chahiye?'],\n      education: ['Kaunse course/field par vichar kar rahe hain?', 'Higher studies ya certification ka plan hai?', 'Study location India ya Abroad par guidance chahiye?'],\n      travel: ['Aap short-term travel chahte hain ya relocation?', 'Work-related travel ya personal yatra?', 'Kab ke aas-paas travel plan kar rahe hain?'],\n      property: ['Ghar kharidne ya bechne ka plan hai?', 'Loan/EMI suitability par sawal hai?', 'Kis city/area mein property dekh rahe hain?'],\n      children: ['Family planning ke baare mein koi specific date range chahte hain?', 'Bacchon ki education ya health par guidance chahiye?', 'Parenting support ya vastu tips chahiye?'],\n      generic: ['Kis vishay par next focus chahte hain — marriage, career, health, finance?', 'Kya aap current dasha/antardasha ke impact par discuss karna chahenge?', 'Aapko remedies (mantra, daan, gemstone) par specific guidance chahiye?']\n    };\n    if (/shaadi|marriage|partner|relationship|manglik|mangal/i.test(text)) topics.push('marriage');\n    if (/career|job|business|work|profession|promotion|startup/i.test(text)) topics.push('career');\n    if (/health|illness|hospital|fitness|diet|stress/i.test(text)) topics.push('health');\n    if (/money|finance|income|wealth|investment|loan|emi|property/i.test(text)) topics.push('finance');\n    if (/study|education|college|exam|course|degree/i.test(text)) topics.push('education');\n    if (/travel|visa|abroad|relocate|yatra/i.test(text)) topics.push('travel');\n    if (/property|house|home|flat|land|plot/i.test(text)) topics.push('property');\n    if (/child|children|baby|pregnan/i.test(text)) topics.push('children');\n\n    // If no clear topic, pick based on recent context\n    if (!topics.length) {\n      if (context.lastTopic) topics.push(context.lastTopic);\n    }\n    if (!topics.length) topics.push('generic');\n    const primary = topics[0];\n    return push(sets[primary] || sets.generic);\n  };\n  const isValidDate = yyyyMmDd => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n  const isValidTime = hhmmss => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and then Chart (sequential flow)\n  // Accepts optional details to avoid relying on possibly stale state\n  const generateKundli = async detailsOverride => {\n    // if guard is already set and a generation is in-flight or done, skip\n    if (hasGeneratedRef.current && (isGeneratingKundli || chartData || kundliData)) return;\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    // Ensure the experience feels Antral: minimum 8-10s before showing chart\n    const minDelayMs = 8000 + Math.floor(Math.random() * 2000);\n    const genStartTs = Date.now();\n    try {\n      const birthDetails = detailsOverride || {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n      // 1) Generate Kundli first\n      const kundliResponse = await astroBotAPI.generateKundli(birthDetails);\n      if (!kundliResponse.success || !kundliResponse.chart_data) {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n      setKundliData(kundliResponse.chart_data);\n\n      // Add Kundli generation success message with warm greeting and remedy promise\n      const successMessage = {\n        id: nextMessageId(),\n        text: `🎉 Bahut badhiya ${userProfile.name} ji! Aapka Kundli taiyar ho gaya hai. Ab main visual chart generate kar raha hun...`,\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, successMessage]);\n\n      // 2) Only after Kundli succeeds, generate Chart\n      const chartResponse = await astroBotAPI.generateChart(birthDetails);\n      if (chartResponse.success && chartResponse.chart_data) {\n        // Wait for remaining time to meet minimum delay\n        const elapsed = Date.now() - genStartTs;\n        const remaining = Math.max(0, minDelayMs - elapsed);\n        if (remaining > 0) {\n          await new Promise(res => setTimeout(res, remaining));\n        }\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n        setCurrentStep('chart_generated');\n        hasGeneratedRef.current = true;\n\n        // Push chart into the chat timeline so it scrolls up with new messages\n        setMessages(prev => [...prev, {\n          id: nextMessageId(),\n          sender: 'pandit',\n          type: 'chart',\n          chartData: chartResponse.chart_data,\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n      } else {\n        throw new Error(chartResponse.error || 'Chart generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      try {\n        var _botText;\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setIsBotTyping(true);\n        setMessages(prev => [...prev, typingMessage]);\n\n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              name\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = {\n              ...userProfile,\n              dob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              tob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              place\n            };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n            setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n              id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            if (hasGeneratedRef.current) return; // already scheduled/generated\n            const details = {\n              name: userProfile.name,\n              dob: userProfile.dob,\n              tob: userProfile.tob,\n              place: userProfile.place,\n              timezone: userProfile.timezone\n            };\n            // Small buffer to ensure any last state changes settle\n            hasGeneratedRef.current = true;\n            await new Promise(res => setTimeout(res, 150));\n            await generateKundli(details);\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = {\n              ...userProfile\n            };\n            if (field === 'name' || field === 'naam') updated.name = value;else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob;else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob;else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place;else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context; prefer Kundli data (has name and rich context)\n          const chartContext = kundliData || chartData || null;\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartContext);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Smooth typing simulation with thoughtful delay for predictions (8-10 seconds)\n        const looksLikePrediction = /\\b(yog|shaadi|career|health|mangal|grah|kundli|prediction|yoga|marriage|job|business|future)\\b/i.test(botText || '');\n        const baseDelay = looksLikePrediction ? 8000 : 1200; // 8s+ for predictions, 1.2s for regular chat\n        const variableDelay = looksLikePrediction ? Math.min(2000, Math.floor((((_botText = botText) === null || _botText === void 0 ? void 0 : _botText.length) || 0) / 15) * 80) : 500;\n        const delayMs = baseDelay + variableDelay; // Total 8-10 seconds for predictions\n        await new Promise(res => setTimeout(res, delayMs));\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n        // Optionally add a gentle follow-up question to keep flow natural\n        if (currentStep === 'chatting' || currentStep === 'chart_generated') {\n          const fupDelay = 1200 + Math.floor(Math.random() * 1200);\n          const followUp = selectFollowUps(currentInput, {});\n          setTimeout(() => {\n            setMessages(prev => [...prev, {\n              id: nextMessageId(),\n              text: followUp,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }]);\n          }, fupDelay);\n        }\n        setIsBotTyping(false);\n      } catch (error) {\n        console.error('Error sending message:', error);\n\n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n        setIsBotTyping(false);\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `expandable-chat-container ${isOpen ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pandit-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-avatar-small\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status\",\n            children: \"Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => message.type === 'chart' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message pandit chart-card`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          style: {\n            maxWidth: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(KundliChart, {\n              chartData: message.chartData,\n              compact: true,\n              onChartReady: () => {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: message.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [message.sender === 'pandit' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: message.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message pandit chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          style: {\n            maxWidth: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: /*#__PURE__*/_jsxDEV(KundliChart, {\n              chartData: chartData,\n              compact: true,\n              onChartReady: () => {\n                console.log('Chart loaded successfully');\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this), (isGeneratingKundli || isGeneratingChart) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kundli-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDD2E Aapka Kundli chart generate ho raha hai... Kripya wait karein\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          ref: inputRef,\n          placeholder: currentStep === 'greeting' || currentStep === 'collecting_details' ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\" : \"Apna sawal yahan likhein...\",\n          className: \"message-input\",\n          disabled: isGeneratingKundli || isBotTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          disabled: isGeneratingKundli || isBotTyping,\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            className: \"send-icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L11 13\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L15 22L11 13L2 9L22 2Z\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this), (currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setEditMode(prev => !prev);\n            if (!editMode) {\n              // entering edit mode: show current details\n              const m = {\n                id: nextMessageId(),\n                text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                sender: 'pandit',\n                timestamp: new Date().toLocaleTimeString()\n              };\n              setMessages(prev => [...prev, m]);\n            }\n          },\n          className: \"send-button\",\n          style: {\n            marginLeft: 8\n          },\n          children: editMode ? 'Done' : 'Edit details'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 612,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpandableChat, \"uDXwdi4jBmrciCegK8mQf4kcGnk=\");\n_c = ExpandableChat;\nexport default ExpandableChat;\nvar _c;\n$RefreshReg$(_c, \"ExpandableChat\");","map":{"version":3,"names":["React","useState","astroBotAPI","KundliChart","jsxDEV","_jsxDEV","ExpandableChat","isOpen","onClose","onRefresh","userData","_s","messages","setMessages","id","text","sender","timestamp","Date","toLocaleTimeString","inputText","setInputText","userProfile","setUserProfile","name","dob","tob","place","timezone","kundliData","setKundliData","chartData","setChartData","isGeneratingKundli","setIsGeneratingKundli","isGeneratingChart","setIsGeneratingChart","currentStep","setCurrentStep","messagesEndRef","useRef","inputRef","editMode","setEditMode","messageIdRef","isBotTyping","setIsBotTyping","hasGeneratedRef","generationTimerRef","useEffect","prev","haveAll","current","details","clearTimeout","setTimeout","generateKundli","nextMessageId","resetMessages","handleRefresh","window","addEventListener","removeEventListener","_messagesEndRef$curre","scrollIntoView","behavior","e","_inputRef$current","focus","parseName","input","trim","cleanup","raw","replace","m","match","parseDob","monthNames","monthShort","padStart","a","parseInt","b","day","month","toString","indexOf","toLowerCase","parseTob","hour","minute","sec","period","test","parsePlace","m2","selectFollowUps","userText","context","topics","push","arr","Math","floor","random","length","sets","marriage","career","health","finance","education","travel","property","children","generic","lastTopic","primary","isValidDate","yyyyMmDd","d","isNaN","getTime","isValidTime","hhmmss","isProfileComplete","detailsOverride","minDelayMs","genStartTs","now","birthDetails","kundliResponse","success","chart_data","Error","error","successMessage","chartResponse","generateChart","elapsed","remaining","max","Promise","res","type","console","errorMessage","handleSendMessage","newMessage","currentInput","_botText","typingMessage","isTyping","botText","correction","updated","filter","msg","concat","change","field","value","chartContext","response","sendChatMessage","looksLikePrediction","baseDelay","variableDelay","min","delayMs","withoutTyping","fupDelay","followUp","errorResponse","handleKeyPress","key","className","src","require","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","message","style","maxWidth","compact","onChartReady","ref","log","onChange","target","onKeyPress","placeholder","disabled","onClick","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","marginLeft","_c","$RefreshReg$"],"sources":["D:/Downloads/astro-main/frontend/src/components/ExpandableChat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\n\nconst ExpandableChat = ({ isOpen, onClose, onRefresh, userData }) => {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    },\n    {\n      id: 2,\n      text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    }\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n  const [isBotTyping, setIsBotTyping] = useState(false);\n  // Ensure chart is generated only once per chat session\n  const hasGeneratedRef = React.useRef(false);\n  const generationTimerRef = React.useRef(null);\n\n  // When userData is provided (from the modal form), greet the user by name and prefill profile\n  React.useEffect(() => {\n    if (userData && userData.name) {\n      // Clear any previous chart on a new session start\n      setChartData(null);\n      setKundliData(null);\n      setUserProfile(prev => ({\n        ...prev,\n        name: userData.name,\n        dob: userData.dob || prev.dob,\n        tob: userData.tob || prev.tob,\n        place: userData.place || prev.place,\n        timezone: userData.timezone || prev.timezone\n      }));\n\n      // Personalized spiritual greeting\n      setMessages([\n        {\n          id: 1,\n          text: `Jai Shri Ram 🙏 ${userData.name} ji, swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon. Aap kaise hain?`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        },\n        {\n          id: 2,\n          text: \"Main abhi aapka Kundli chart taiyar kar raha hun... Kripya thoda wait karein, grahon ki sthiti dekhni hai.\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }\n      ]);\n\n      const haveAll = (userData.dob && userData.tob && userData.place);\n      if (haveAll) {\n        // Auto-generate chart when all details are available\n        if (!hasGeneratedRef.current) {\n          setCurrentStep('generating');\n          const details = {\n            name: userData.name,\n            dob: userData.dob,\n            tob: userData.tob,\n            place: userData.place,\n            timezone: userData.timezone || 'Asia/Kolkata'\n          };\n          // Mark as generating immediately to avoid duplicate triggers in Strict Mode\n          hasGeneratedRef.current = true;\n          if (generationTimerRef.current) clearTimeout(generationTimerRef.current);\n          generationTimerRef.current = setTimeout(() => {\n            generateKundli(details);\n          }, 150);\n        }\n      } else {\n        setCurrentStep('ask_dob');\n      }\n    }\n  }, [userData]);\n\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([\n          {\n            id: 1,\n            text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          },\n          {\n            id: 2,\n            text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }\n        ]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setChartData(null);\n        if (generationTimerRef.current) {\n          clearTimeout(generationTimerRef.current);\n          generationTimerRef.current = null;\n        }\n        hasGeneratedRef.current = false;\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n      \n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n      \n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      \n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // Auto-focus input when chat opens or bot finished typing\n  React.useEffect(() => {\n    if (isOpen && !isBotTyping && !isGeneratingKundli) {\n      try { inputRef.current?.focus(); } catch (e) {}\n    }\n  }, [isOpen, isBotTyping, isGeneratingKundli]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = (text) => {\n    const input = text.trim();\n    const cleanup = (raw) => {\n      if (!raw) return null;\n      // Remove trailing Hindi copula words like 'hai', 'hun', 'hu'\n      let name = raw.replace(/\\b(hai|hun|hu|hoon)\\b\\.?$/i, '').trim();\n      // Remove trailing punctuation\n      name = name.replace(/[.,;:!?]+$/g, '').trim();\n      // Collapse multiple spaces\n      name = name.replace(/\\s{2,}/g, ' ');\n      return name || null;\n    };\n\n    // 1) \"mera naam <name> hai\" (common Hindi pattern)\n    let m = input.match(/(?:^|\\b)mera\\s+naam\\s+([a-zA-Z][a-zA-Z\\s'.-]*?)(?:\\s+(?:hai|hun|hu|hoon))?\\b/i);\n    if (m) return cleanup(m[1]);\n\n    // 2) \"my name is <name>\"\n    m = input.match(/(?:^|\\b)my\\s+name\\s+is\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 3) \"I am <name>\" or \"I'm <name>\"\n    m = input.match(/^(?:i\\s*am|i'm)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 4) Bare name fallback (single or multi-word letters only)\n    m = input.match(/^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/);\n    if (m) return cleanup(m[1]);\n\n    return null;\n  };\n\n  const parseDob = (text) => {\n    const monthNames = ['january','february','march','april','may','june','july','august','september','october','november','december'];\n    const monthShort = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2,'0')}-${m[3].padStart(2,'0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1],10), b = parseInt(m[2],10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a; const month = b;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${day.toString().padStart(2,'0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 \n        ? monthNames.indexOf(m[2].toLowerCase()) + 1\n        : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${m[1].padStart(2,'0')}`;\n    }\n    return null;\n  };\n\n  const parseTob = (text) => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1],10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = (m[4] || m[3]) || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2,'0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n\n  const parsePlace = (text) => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n\n  // Pick relevant follow-up prompts based on the latest user intent\n  const selectFollowUps = (userText, context = {}) => {\n    const text = (userText || '').toLowerCase();\n    const topics = [];\n    const push = (arr) => arr[Math.floor(Math.random() * arr.length)];\n\n    const sets = {\n      marriage: [\n        'Aapke shaadi ke yog ke baare mein aur detail chahiye?',\n        'Kya rishta ki baat chal rahi hai filhaal?',\n        'Shaadi timeline ke baare mein specific sawal puchna chahenge?'\n      ],\n      career: [\n        'Aap kaam kis field mein karte hain?',\n        'Job change ya promotion ka soch rahe hain?',\n        'Business/Startup ko lekar koi specific sawal hai?'\n      ],\n      health: [\n        'Health ke kaunse area ko lekar chinta hai?',\n        'Lifestyle/discipline ke baare mein guidance chahiye?',\n        'Koi chronic issue hai jiske upchar chahte hain?'\n      ],\n      finance: [\n        'Investment ko lekar aapka plan kya hai?',\n        'Savings ya expenses control par sawal hai?',\n        'Business finance ya income growth par guidance chahiye?'\n      ],\n      education: [\n        'Kaunse course/field par vichar kar rahe hain?',\n        'Higher studies ya certification ka plan hai?',\n        'Study location India ya Abroad par guidance chahiye?'\n      ],\n      travel: [\n        'Aap short-term travel chahte hain ya relocation?',\n        'Work-related travel ya personal yatra?',\n        'Kab ke aas-paas travel plan kar rahe hain?'\n      ],\n      property: [\n        'Ghar kharidne ya bechne ka plan hai?',\n        'Loan/EMI suitability par sawal hai?',\n        'Kis city/area mein property dekh rahe hain?'\n      ],\n      children: [\n        'Family planning ke baare mein koi specific date range chahte hain?',\n        'Bacchon ki education ya health par guidance chahiye?',\n        'Parenting support ya vastu tips chahiye?'\n      ],\n      generic: [\n        'Kis vishay par next focus chahte hain — marriage, career, health, finance?',\n        'Kya aap current dasha/antardasha ke impact par discuss karna chahenge?',\n        'Aapko remedies (mantra, daan, gemstone) par specific guidance chahiye?'\n      ]\n    };\n\n    if (/shaadi|marriage|partner|relationship|manglik|mangal/i.test(text)) topics.push('marriage');\n    if (/career|job|business|work|profession|promotion|startup/i.test(text)) topics.push('career');\n    if (/health|illness|hospital|fitness|diet|stress/i.test(text)) topics.push('health');\n    if (/money|finance|income|wealth|investment|loan|emi|property/i.test(text)) topics.push('finance');\n    if (/study|education|college|exam|course|degree/i.test(text)) topics.push('education');\n    if (/travel|visa|abroad|relocate|yatra/i.test(text)) topics.push('travel');\n    if (/property|house|home|flat|land|plot/i.test(text)) topics.push('property');\n    if (/child|children|baby|pregnan/i.test(text)) topics.push('children');\n\n    // If no clear topic, pick based on recent context\n    if (!topics.length) {\n      if (context.lastTopic) topics.push(context.lastTopic);\n    }\n    if (!topics.length) topics.push('generic');\n\n    const primary = topics[0];\n    return push(sets[primary] || sets.generic);\n  };\n\n  const isValidDate = (yyyyMmDd) => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n\n  const isValidTime = (hhmmss) => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and then Chart (sequential flow)\n  // Accepts optional details to avoid relying on possibly stale state\n  const generateKundli = async (detailsOverride) => {\n    // if guard is already set and a generation is in-flight or done, skip\n    if (hasGeneratedRef.current && (isGeneratingKundli || chartData || kundliData)) return;\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    // Ensure the experience feels Antral: minimum 8-10s before showing chart\n    const minDelayMs = 8000 + Math.floor(Math.random() * 2000);\n    const genStartTs = Date.now();\n    \n    try {\n      const birthDetails = detailsOverride || {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n      // 1) Generate Kundli first\n      const kundliResponse = await astroBotAPI.generateKundli(birthDetails);\n\n      if (!kundliResponse.success || !kundliResponse.chart_data) {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n\n      setKundliData(kundliResponse.chart_data);\n\n      // Add Kundli generation success message with warm greeting and remedy promise\n      const successMessage = {\n        id: nextMessageId(),\n        text: `🎉 Bahut badhiya ${userProfile.name} ji! Aapka Kundli taiyar ho gaya hai. Ab main visual chart generate kar raha hun...`,\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, successMessage]);\n\n      // 2) Only after Kundli succeeds, generate Chart\n      const chartResponse = await astroBotAPI.generateChart(birthDetails);\n      if (chartResponse.success && chartResponse.chart_data) {\n        // Wait for remaining time to meet minimum delay\n        const elapsed = Date.now() - genStartTs;\n        const remaining = Math.max(0, minDelayMs - elapsed);\n        if (remaining > 0) {\n          await new Promise(res => setTimeout(res, remaining));\n        }\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n        setCurrentStep('chart_generated');\n        hasGeneratedRef.current = true;\n\n        // Push chart into the chat timeline so it scrolls up with new messages\n        setMessages(prev => [...prev, {\n          id: nextMessageId(),\n          sender: 'pandit',\n          type: 'chart',\n          chartData: chartResponse.chart_data,\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n      } else {\n        throw new Error(chartResponse.error || 'Chart generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      \n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      \n      try {\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setIsBotTyping(true);\n        setMessages(prev => [...prev, typingMessage]);\n        \n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = { ...userProfile, name };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = { ...userProfile, dob };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = { ...userProfile, tob };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = { ...userProfile, place };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n        setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n          id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            if (hasGeneratedRef.current) return; // already scheduled/generated\n            const details = {\n              name: userProfile.name,\n              dob: userProfile.dob,\n              tob: userProfile.tob,\n              place: userProfile.place,\n              timezone: userProfile.timezone\n            };\n            // Small buffer to ensure any last state changes settle\n            hasGeneratedRef.current = true;\n            await new Promise(res => setTimeout(res, 150));\n            await generateKundli(details);\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = { ...userProfile };\n            if (field === 'name' || field === 'naam') updated.name = value;\n            else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob; else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob; else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place; else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context; prefer Kundli data (has name and rich context)\n          const chartContext = kundliData || chartData || null;\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartContext);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Smooth typing simulation with thoughtful delay for predictions (8-10 seconds)\n        const looksLikePrediction = /\\b(yog|shaadi|career|health|mangal|grah|kundli|prediction|yoga|marriage|job|business|future)\\b/i.test(botText || '');\n        const baseDelay = looksLikePrediction ? 8000 : 1200; // 8s+ for predictions, 1.2s for regular chat\n        const variableDelay = looksLikePrediction ? Math.min(2000, Math.floor((botText?.length || 0) / 15) * 80) : 500;\n        const delayMs = baseDelay + variableDelay; // Total 8-10 seconds for predictions\n        await new Promise(res => setTimeout(res, delayMs));\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n        // Optionally add a gentle follow-up question to keep flow natural\n        if (currentStep === 'chatting' || currentStep === 'chart_generated') {\n          const fupDelay = 1200 + Math.floor(Math.random() * 1200);\n          const followUp = selectFollowUps(currentInput, {});\n          setTimeout(() => {\n            setMessages(prev => ([...prev, {\n              id: nextMessageId(),\n              text: followUp,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }]));\n          }, fupDelay);\n        }\n        setIsBotTyping(false);\n        \n      } catch (error) {\n        console.error('Error sending message:', error);\n        \n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n        setIsBotTyping(false);\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className={`expandable-chat-container ${isOpen ? 'expanded' : ''}`}>\n      {/* Chat Header */}\n      <div className=\"chat-header\">\n        <div className=\"pandit-info\">\n          <div className=\"pandit-avatar-small\">\n            <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n          </div>\n          <div className=\"pandit-details\">\n            <h3>Pandit ji</h3>\n            <span className=\"status\">Online</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"messages-container\">\n        {messages.map((message) => (\n          message.type === 'chart' ? (\n            <div key={message.id} className={`message pandit chart-card`}>\n              <div className=\"message-avatar\">\n                <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n              </div>\n              <div className=\"message-content\" style={{maxWidth: '100%'}}>\n                <div className=\"message-bubble\">\n                  <KundliChart\n                    chartData={message.chartData}\n                    compact\n                    onChartReady={() => {}}\n                  />\n                  <span className=\"message-time\">{message.timestamp}</span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div key={message.id} className={`message ${message.sender}`}>\n              {message.sender === 'pandit' && (\n                <div className=\"message-avatar\">\n                  <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n                </div>\n              )}\n              <div className=\"message-content\">\n                <div className=\"message-bubble\">\n                  <p>{message.text}</p>\n                  <span className=\"message-time\">{message.timestamp}</span>\n                </div>\n              </div>\n            </div>\n          )\n        ))}\n        <div ref={messagesEndRef} />\n        \n        {/* Kundli Chart Display as a chat card */}\n        {chartData && (\n          <div className=\"message pandit chart-card\">\n            <div className=\"message-avatar\">\n              <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n            </div>\n            <div className=\"message-content\" style={{maxWidth: '100%'}}>\n              <div className=\"message-bubble\">\n                <KundliChart \n                  chartData={chartData} \n                  compact\n                  onChartReady={() => {\n                    console.log('Chart loaded successfully');\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Loading indicator for Kundli generation */}\n        {(isGeneratingKundli || isGeneratingChart) && (\n          <div className=\"kundli-loading\">\n            <div className=\"loading-spinner\"></div>\n            <p>🔮 Aapka Kundli chart generate ho raha hai... Kripya wait karein</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"input-container\">\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={handleKeyPress}\n            ref={inputRef}\n            placeholder={\n              currentStep === 'greeting' || currentStep === 'collecting_details'\n                ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\"\n                : \"Apna sawal yahan likhein...\"\n            }\n            className=\"message-input\"\n            disabled={isGeneratingKundli || isBotTyping}\n          />\n          <button \n            onClick={handleSendMessage} \n            className=\"send-button\"\n            disabled={isGeneratingKundli || isBotTyping}\n          >\n            <svg viewBox=\"0 0 24 24\" className=\"send-icon\">\n              <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n              <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </button>\n          {(currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && (\n            <button\n              onClick={() => {\n                setEditMode((prev) => !prev);\n                if (!editMode) {\n                  // entering edit mode: show current details\n                  const m = {\n                    id: nextMessageId(),\n                    text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                    sender: 'pandit',\n                    timestamp: new Date().toLocaleTimeString()\n                  };\n                  setMessages((prev) => [...prev, m]);\n                }\n              }}\n              className=\"send-button\"\n              style={{ marginLeft: 8 }}\n            >\n              {editMode ? 'Done' : 'Edit details'}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpandableChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}