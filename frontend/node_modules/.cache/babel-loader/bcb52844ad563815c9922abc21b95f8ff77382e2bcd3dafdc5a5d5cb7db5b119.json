{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\astro-main\\\\frontend\\\\src\\\\components\\\\AstroBotUI.js\",\n  _s = $RefreshSig$();\n/**\n * AstroBotUI - Main Application Component\n * \n * This is the root component of the AstroBot frontend application.\n * It orchestrates all other components and manages the overall application state.\n * \n * Features:\n * - Chat state management (open/closed)\n * - Component communication and event handling\n * - Background layer with animated effects\n * - Responsive layout for desktop and mobile\n * \n * @component\n * @returns {JSX.Element} The main application interface\n */\n\nimport React, { useState } from 'react';\nimport ChatBubble from './ChatBubble';\nimport Character from './Character';\nimport BottomNavigation from './BottomNavigation';\nimport ExpandableChat from './ExpandableChat';\nimport './AstroBotUI.css';\n// No video import; using procedural CSS background for better performance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AstroBotUI = () => {\n  _s();\n  // State management for chat interface\n  const [isChatOpen, setIsChatOpen] = useState(false);\n\n  /**\n   * Handles toggling the chat interface between open and closed states\n   * This function is passed to BottomNavigation component\n   */\n  const handleChatToggle = () => {\n    setIsChatOpen(!isChatOpen);\n  };\n\n  /**\n   * Handles closing the chat interface\n   * This function is passed to ExpandableChat component\n   */\n  const handleCloseChat = () => {\n    setIsChatOpen(false);\n  };\n\n  /**\n   * Handles refreshing the chat by clearing messages\n   * Uses custom event dispatch to communicate with ExpandableChat component\n   */\n  const handleRefreshChat = () => {\n    // Trigger refresh event for ExpandableChat\n    window.dispatchEvent(new CustomEvent('refreshChat'));\n    console.log('Refreshing chat - clearing messages');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"astrobot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-layer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-header\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/Astro_LOGO.png\",\n        alt: \"AstroBot Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"central-section\",\n      children: [!isChatOpen && /*#__PURE__*/_jsxDEV(Character, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this), !isChatOpen && /*#__PURE__*/_jsxDEV(ChatBubble, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BottomNavigation, {\n      onChatToggle: handleChatToggle,\n      isChatOpen: isChatOpen,\n      onRefreshChat: handleRefreshChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExpandableChat, {\n      isOpen: isChatOpen,\n      onClose: handleCloseChat,\n      onRefresh: handleRefreshChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(AstroBotUI, \"1RwI3Rpum6EBbUdSXPo/Ywgstjs=\");\n_c = AstroBotUI;\nexport default AstroBotUI;\nvar _c;\n$RefreshReg$(_c, \"AstroBotUI\");","map":{"version":3,"names":["React","useState","ChatBubble","Character","BottomNavigation","ExpandableChat","jsxDEV","_jsxDEV","AstroBotUI","_s","isChatOpen","setIsChatOpen","handleChatToggle","handleCloseChat","handleRefreshChat","window","dispatchEvent","CustomEvent","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onChatToggle","onRefreshChat","isOpen","onClose","onRefresh","_c","$RefreshReg$"],"sources":["D:/Downloads/astro-main/frontend/src/components/AstroBotUI.js"],"sourcesContent":["/**\n * AstroBotUI - Main Application Component\n * \n * This is the root component of the AstroBot frontend application.\n * It orchestrates all other components and manages the overall application state.\n * \n * Features:\n * - Chat state management (open/closed)\n * - Component communication and event handling\n * - Background layer with animated effects\n * - Responsive layout for desktop and mobile\n * \n * @component\n * @returns {JSX.Element} The main application interface\n */\n\nimport React, { useState } from 'react';\nimport ChatBubble from './ChatBubble';\nimport Character from './Character';\nimport BottomNavigation from './BottomNavigation';\nimport ExpandableChat from './ExpandableChat';\nimport './AstroBotUI.css';\n// No video import; using procedural CSS background for better performance\n\nconst AstroBotUI = () => {\n  // State management for chat interface\n  const [isChatOpen, setIsChatOpen] = useState(false);\n\n  /**\n   * Handles toggling the chat interface between open and closed states\n   * This function is passed to BottomNavigation component\n   */\n  const handleChatToggle = () => {\n    setIsChatOpen(!isChatOpen);\n  };\n\n  /**\n   * Handles closing the chat interface\n   * This function is passed to ExpandableChat component\n   */\n  const handleCloseChat = () => {\n    setIsChatOpen(false);\n  };\n\n  /**\n   * Handles refreshing the chat by clearing messages\n   * Uses custom event dispatch to communicate with ExpandableChat component\n   */\n  const handleRefreshChat = () => {\n    // Trigger refresh event for ExpandableChat\n    window.dispatchEvent(new CustomEvent('refreshChat'));\n    console.log('Refreshing chat - clearing messages');\n  };\n\n  return (\n    <div className=\"astrobot-container\">\n      {/* Background layer with animated effects for visual appeal */}\n      <div className=\"background-layer\" />\n\n      {/* Top header with application logo */}\n      <div className=\"top-header\">\n        <img src=\"/Astro_LOGO.png\" alt=\"AstroBot Logo\" className=\"header-logo\" />\n      </div>\n\n      {/* Central section containing character and chat bubble when chat is closed */}\n      <div className=\"central-section\">\n        {!isChatOpen && <Character />}\n        {!isChatOpen && <ChatBubble />}\n      </div>\n\n      {/* Bottom navigation with chat controls */}\n      <BottomNavigation \n        onChatToggle={handleChatToggle} \n        isChatOpen={isChatOpen} \n        onRefreshChat={handleRefreshChat} \n      />\n\n      {/* Expandable chat window - shown when chat is open */}\n      <ExpandableChat \n        isOpen={isChatOpen} \n        onClose={handleCloseChat} \n        onRefresh={handleRefreshChat} \n      />\n    </div>\n  );\n};\n\nexport default AstroBotUI;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,kBAAkB;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEnD;AACF;AACA;AACA;EACE,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC7BD,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMG,eAAe,GAAGA,CAAA,KAAM;IAC5BF,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAC,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,aAAa,CAAC,CAAC;IACpDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;EACpD,CAAC;EAED,oBACEZ,OAAA;IAAKa,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAEjCd,OAAA;MAAKa,SAAS,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGpClB,OAAA;MAAKa,SAAS,EAAC,YAAY;MAAAC,QAAA,eACzBd,OAAA;QAAKmB,GAAG,EAAC,iBAAiB;QAACC,GAAG,EAAC,eAAe;QAACP,SAAS,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eAGNlB,OAAA;MAAKa,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAC7B,CAACX,UAAU,iBAAIH,OAAA,CAACJ,SAAS;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC5B,CAACf,UAAU,iBAAIH,OAAA,CAACL,UAAU;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eAGNlB,OAAA,CAACH,gBAAgB;MACfwB,YAAY,EAAEhB,gBAAiB;MAC/BF,UAAU,EAAEA,UAAW;MACvBmB,aAAa,EAAEf;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eAGFlB,OAAA,CAACF,cAAc;MACbyB,MAAM,EAAEpB,UAAW;MACnBqB,OAAO,EAAElB,eAAgB;MACzBmB,SAAS,EAAElB;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CA7DID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA+DhB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}