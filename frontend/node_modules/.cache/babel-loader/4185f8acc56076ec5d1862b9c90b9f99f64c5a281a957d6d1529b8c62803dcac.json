{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\astro-main\\\\frontend\\\\src\\\\components\\\\ExpandableChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpandableChat = ({\n  isOpen,\n  onClose,\n  onRefresh,\n  userData\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }, {\n    id: 2,\n    text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n    sender: 'pandit',\n    timestamp: new Date().toLocaleTimeString()\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n  const [isBotTyping, setIsBotTyping] = useState(false);\n\n  // When userData is provided (from the modal form), greet the user by name and prefill profile\n  React.useEffect(() => {\n    if (userData && userData.name) {\n      setUserProfile(prev => ({\n        ...prev,\n        name: userData.name,\n        dob: userData.dob || prev.dob,\n        tob: userData.tob || prev.tob,\n        place: userData.place || prev.place,\n        timezone: userData.timezone || prev.timezone\n      }));\n\n      // Personalized spiritual greeting\n      setMessages([{\n        id: 1,\n        text: `Jai Shri Ram 🙏 ${userData.name} ji, swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon. Aap kaise hain?`,\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: 2,\n        text: \"Main abhi aapka Kundli chart taiyar kar raha hun... Kripya thoda wait karein, grahon ki sthiti dekhni hai.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n      const haveAll = userData.dob && userData.tob && userData.place;\n      if (haveAll) {\n        // Auto-generate chart when all details are available\n        setCurrentStep('generating');\n        generateKundli();\n      } else {\n        setCurrentStep('ask_dob');\n      }\n    }\n  }, [userData]);\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([{\n          id: 1,\n          text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }, {\n          id: 2,\n          text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n\n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n\n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: 'smooth'\n      });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // Auto-focus input when chat opens or bot finished typing\n  React.useEffect(() => {\n    if (isOpen && !isBotTyping && !isGeneratingKundli) {\n      try {\n        var _inputRef$current;\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      } catch (e) {}\n    }\n  }, [isOpen, isBotTyping, isGeneratingKundli]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = text => {\n    const input = text.trim();\n    const cleanup = raw => {\n      if (!raw) return null;\n      // Remove trailing Hindi copula words like 'hai', 'hun', 'hu'\n      let name = raw.replace(/\\b(hai|hun|hu|hoon)\\b\\.?$/i, '').trim();\n      // Remove trailing punctuation\n      name = name.replace(/[.,;:!?]+$/g, '').trim();\n      // Collapse multiple spaces\n      name = name.replace(/\\s{2,}/g, ' ');\n      return name || null;\n    };\n\n    // 1) \"mera naam <name> hai\" (common Hindi pattern)\n    let m = input.match(/(?:^|\\b)mera\\s+naam\\s+([a-zA-Z][a-zA-Z\\s'.-]*?)(?:\\s+(?:hai|hun|hu|hoon))?\\b/i);\n    if (m) return cleanup(m[1]);\n\n    // 2) \"my name is <name>\"\n    m = input.match(/(?:^|\\b)my\\s+name\\s+is\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 3) \"I am <name>\" or \"I'm <name>\"\n    m = input.match(/^(?:i\\s*am|i'm)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 4) Bare name fallback (single or multi-word letters only)\n    m = input.match(/^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/);\n    if (m) return cleanup(m[1]);\n    return null;\n  };\n  const parseDob = text => {\n    const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\n    const monthShort = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2, '0')}-${m[3].padStart(2, '0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1], 10),\n        b = parseInt(m[2], 10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a;\n      const month = b;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 ? monthNames.indexOf(m[2].toLowerCase()) + 1 : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2, '0')}-${m[1].padStart(2, '0')}`;\n    }\n    return null;\n  };\n  const parseTob = text => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1], 10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = m[4] || m[3] || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2, '0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n  const parsePlace = text => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n  const isValidDate = yyyyMmDd => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n  const isValidTime = hhmmss => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and Chart\n  const generateKundli = async () => {\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    try {\n      const birthDetails = {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n\n      // Generate both chart and kundli data in parallel\n      const [chartResponse, kundliResponse] = await Promise.all([astroBotAPI.generateChart(birthDetails), astroBotAPI.generateKundli(birthDetails)]);\n      if (chartResponse.success && chartResponse.chart_data) {\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n      }\n      if (kundliResponse.success && kundliResponse.chart_data) {\n        setKundliData(kundliResponse.chart_data);\n        setCurrentStep('chart_generated');\n\n        // Add Kundli generation success message with greeting and remedy mention\n        const successMessage = {\n          id: nextMessageId(),\n          text: `🎉 ${userProfile.name} ji, aapka Kundli chart taiyar hai! Main yahan hun aapki madad ke liye aur aapko astrology ke saath-saath zaroori upchar (remedies) bhi dunga. Aap koi bhi sawal puch sakte hain - grah ki sthiti, dasha, yog, ya koi bhi astrological prediction ke bare mein.`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, successMessage]);\n      } else {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      try {\n        var _botText;\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setIsBotTyping(true);\n        setMessages(prev => [...prev, typingMessage]);\n\n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              name\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = {\n              ...userProfile,\n              dob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              tob\n            };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = {\n              ...userProfile,\n              place\n            };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n            setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n              id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            await generateKundli();\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = {\n              ...userProfile\n            };\n            if (field === 'name' || field === 'naam') updated.name = value;else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob;else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob;else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place;else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartData);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Smooth typing simulation with thoughtful delay for predictions (8-10 seconds)\n        const looksLikePrediction = /\\b(yog|shaadi|career|health|mangal|grah|kundli|prediction|yoga|marriage|job|business|future)\\b/i.test(botText || '');\n        const baseDelay = looksLikePrediction ? 8000 : 1200; // 8s+ for predictions, 1.2s for regular chat\n        const variableDelay = looksLikePrediction ? Math.min(2000, Math.floor((((_botText = botText) === null || _botText === void 0 ? void 0 : _botText.length) || 0) / 15) * 80) : 500;\n        const delayMs = baseDelay + variableDelay; // Total 8-10 seconds for predictions\n        await new Promise(res => setTimeout(res, delayMs));\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n        // Optionally add a gentle follow-up question to keep flow natural\n        if (currentStep === 'chatting' || currentStep === 'chart_generated') {\n          const followUps = [\"Abhi aapke rishte ki baat chal rahi hai kya?\", \"Kya aap kisi ko pasand karte ho?\", \"Aapka career kis field mein hai?\", \"Aapko apni health ke baare mein bhi jaana hai kya?\"];\n          const fupDelay = 1200 + Math.floor(Math.random() * 1200);\n          setTimeout(() => {\n            setMessages(prev => [...prev, {\n              id: nextMessageId(),\n              text: followUps[Math.floor(Math.random() * followUps.length)],\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }]);\n          }, fupDelay);\n        }\n        setIsBotTyping(false);\n      } catch (error) {\n        console.error('Error sending message:', error);\n\n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n        setIsBotTyping(false);\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `expandable-chat-container ${isOpen ? 'expanded' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pandit-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-avatar-small\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pandit-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status\",\n            children: \"Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [message.sender === 'pandit' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../assets/Astro_Avatar.png'),\n            alt: \"Pandit ji\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              children: message.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), chartData && /*#__PURE__*/_jsxDEV(KundliChart, {\n        chartData: chartData,\n        onChartReady: () => {\n          // Chart is ready, no need for additional message\n          console.log('Chart loaded successfully');\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this), (isGeneratingKundli || isGeneratingChart) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kundli-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDD2E Aapka Kundli chart generate ho raha hai... Kripya wait karein\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value),\n          onKeyPress: handleKeyPress,\n          ref: inputRef,\n          placeholder: currentStep === 'greeting' || currentStep === 'collecting_details' ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\" : \"Apna sawal yahan likhein...\",\n          className: \"message-input\",\n          disabled: isGeneratingKundli || isBotTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          disabled: isGeneratingKundli || isBotTyping,\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            className: \"send-icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L11 13\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L15 22L11 13L2 9L22 2Z\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), (currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setEditMode(prev => !prev);\n            if (!editMode) {\n              // entering edit mode: show current details\n              const m = {\n                id: nextMessageId(),\n                text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                sender: 'pandit',\n                timestamp: new Date().toLocaleTimeString()\n              };\n              setMessages(prev => [...prev, m]);\n            }\n          },\n          className: \"send-button\",\n          style: {\n            marginLeft: 8\n          },\n          children: editMode ? 'Done' : 'Edit details'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpandableChat, \"0mlve5ZKbvTxQBfaiHtLEqde06w=\");\n_c = ExpandableChat;\nexport default ExpandableChat;\nvar _c;\n$RefreshReg$(_c, \"ExpandableChat\");","map":{"version":3,"names":["React","useState","astroBotAPI","KundliChart","jsxDEV","_jsxDEV","ExpandableChat","isOpen","onClose","onRefresh","userData","_s","messages","setMessages","id","text","sender","timestamp","Date","toLocaleTimeString","inputText","setInputText","userProfile","setUserProfile","name","dob","tob","place","timezone","kundliData","setKundliData","chartData","setChartData","isGeneratingKundli","setIsGeneratingKundli","isGeneratingChart","setIsGeneratingChart","currentStep","setCurrentStep","messagesEndRef","useRef","inputRef","editMode","setEditMode","messageIdRef","isBotTyping","setIsBotTyping","useEffect","prev","haveAll","generateKundli","nextMessageId","current","resetMessages","handleRefresh","window","addEventListener","removeEventListener","_messagesEndRef$curre","scrollIntoView","behavior","e","_inputRef$current","focus","parseName","input","trim","cleanup","raw","replace","m","match","parseDob","monthNames","monthShort","padStart","a","parseInt","b","day","month","toString","indexOf","toLowerCase","parseTob","hour","minute","sec","period","test","parsePlace","m2","isValidDate","yyyyMmDd","d","isNaN","getTime","isValidTime","hhmmss","isProfileComplete","birthDetails","chartResponse","kundliResponse","Promise","all","generateChart","success","chart_data","successMessage","Error","error","console","errorMessage","handleSendMessage","newMessage","currentInput","_botText","typingMessage","isTyping","botText","correction","updated","filter","msg","concat","change","field","value","response","sendChatMessage","looksLikePrediction","baseDelay","variableDelay","Math","min","floor","length","delayMs","res","setTimeout","withoutTyping","followUps","fupDelay","random","errorResponse","handleKeyPress","key","className","children","src","require","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","message","ref","onChartReady","log","type","onChange","target","onKeyPress","placeholder","disabled","onClick","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","style","marginLeft","_c","$RefreshReg$"],"sources":["D:/Downloads/astro-main/frontend/src/components/ExpandableChat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ExpandableChat.css';\nimport astroBotAPI from '../services/api';\nimport KundliChart from './KundliChart';\n\nconst ExpandableChat = ({ isOpen, onClose, onRefresh, userData }) => {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    },\n    {\n      id: 2,\n      text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n      sender: 'pandit',\n      timestamp: new Date().toLocaleTimeString()\n    }\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    dob: '',\n    tob: '',\n    place: '',\n    timezone: 'Asia/Kolkata'\n  });\n  const [kundliData, setKundliData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [isGeneratingKundli, setIsGeneratingKundli] = useState(false);\n  const [isGeneratingChart, setIsGeneratingChart] = useState(false);\n  // Steps: ask_name, ask_dob, ask_tob, ask_place, confirm_details, generating, chart_generated, chatting\n  const [currentStep, setCurrentStep] = useState('ask_name');\n  const messagesEndRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const [editMode, setEditMode] = useState(false);\n  const messageIdRef = React.useRef(3);\n  const [isBotTyping, setIsBotTyping] = useState(false);\n\n  // When userData is provided (from the modal form), greet the user by name and prefill profile\n  React.useEffect(() => {\n    if (userData && userData.name) {\n      setUserProfile(prev => ({\n        ...prev,\n        name: userData.name,\n        dob: userData.dob || prev.dob,\n        tob: userData.tob || prev.tob,\n        place: userData.place || prev.place,\n        timezone: userData.timezone || prev.timezone\n      }));\n\n      // Personalized spiritual greeting\n      setMessages([\n        {\n          id: 1,\n          text: `Jai Shri Ram 🙏 ${userData.name} ji, swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon. Aap kaise hain?`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        },\n        {\n          id: 2,\n          text: \"Main abhi aapka Kundli chart taiyar kar raha hun... Kripya thoda wait karein, grahon ki sthiti dekhni hai.\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        }\n      ]);\n\n      const haveAll = (userData.dob && userData.tob && userData.place);\n      if (haveAll) {\n        // Auto-generate chart when all details are available\n        setCurrentStep('generating');\n        generateKundli();\n      } else {\n        setCurrentStep('ask_dob');\n      }\n    }\n  }, [userData]);\n\n  const nextMessageId = () => {\n    const id = messageIdRef.current;\n    messageIdRef.current += 1;\n    return id;\n  };\n\n  // Handle refresh - clear messages and reset to initial state\n  React.useEffect(() => {\n    if (onRefresh) {\n      const resetMessages = () => {\n        setMessages([\n          {\n            id: 1,\n            text: \"Jai Shri Ram 🙏 Swagat hai aapka AstroRemedis par. Main aapka digital Pandit Ji hoon.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          },\n          {\n            id: 2,\n            text: \"Aapka naam kya hai aur kis vishay par margdarshan chahte hain? Pehle apna naam batayiye (e.g., Mera naam Rajesh hai).\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }\n        ]);\n        setInputText('');\n        setUserProfile({\n          name: '',\n          dob: '',\n          tob: '',\n          place: '',\n          timezone: 'Asia/Kolkata'\n        });\n        setKundliData(null);\n        setCurrentStep('ask_name');\n        setEditMode(false);\n      };\n      \n      // Listen for refresh events\n      const handleRefresh = () => {\n        resetMessages();\n      };\n      \n      // Store the handler so we can clean it up\n      window.addEventListener('refreshChat', handleRefresh);\n      \n      return () => {\n        window.removeEventListener('refreshChat', handleRefresh);\n      };\n    }\n  }, [onRefresh]);\n\n  // Auto-scroll to latest message\n  React.useEffect(() => {\n    try {\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    } catch (e) {\n      // ignore scroll errors\n    }\n  }, [messages, isGeneratingKundli, isGeneratingChart, chartData]);\n\n  // Auto-focus input when chat opens or bot finished typing\n  React.useEffect(() => {\n    if (isOpen && !isBotTyping && !isGeneratingKundli) {\n      try { inputRef.current?.focus(); } catch (e) {}\n    }\n  }, [isOpen, isBotTyping, isGeneratingKundli]);\n\n  // NLP helpers for stepwise extraction\n  const parseName = (text) => {\n    const input = text.trim();\n    const cleanup = (raw) => {\n      if (!raw) return null;\n      // Remove trailing Hindi copula words like 'hai', 'hun', 'hu'\n      let name = raw.replace(/\\b(hai|hun|hu|hoon)\\b\\.?$/i, '').trim();\n      // Remove trailing punctuation\n      name = name.replace(/[.,;:!?]+$/g, '').trim();\n      // Collapse multiple spaces\n      name = name.replace(/\\s{2,}/g, ' ');\n      return name || null;\n    };\n\n    // 1) \"mera naam <name> hai\" (common Hindi pattern)\n    let m = input.match(/(?:^|\\b)mera\\s+naam\\s+([a-zA-Z][a-zA-Z\\s'.-]*?)(?:\\s+(?:hai|hun|hu|hoon))?\\b/i);\n    if (m) return cleanup(m[1]);\n\n    // 2) \"my name is <name>\"\n    m = input.match(/(?:^|\\b)my\\s+name\\s+is\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 3) \"I am <name>\" or \"I'm <name>\"\n    m = input.match(/^(?:i\\s*am|i'm)\\s+([a-zA-Z][a-zA-Z\\s'.-]+)$/i);\n    if (m) return cleanup(m[1]);\n\n    // 4) Bare name fallback (single or multi-word letters only)\n    m = input.match(/^([a-zA-Z][a-zA-Z\\s'.-]{1,})$/);\n    if (m) return cleanup(m[1]);\n\n    return null;\n  };\n\n  const parseDob = (text) => {\n    const monthNames = ['january','february','march','april','may','june','july','august','september','october','november','december'];\n    const monthShort = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];\n    let m;\n    m = text.match(/(\\d{4})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{1,2})/); // YYYY-MM-DD\n    if (m) return `${m[1]}-${m[2].padStart(2,'0')}-${m[3].padStart(2,'0')}`;\n    m = text.match(/(\\d{1,2})[\\/\\-\\.](\\d{1,2})[\\/\\-\\.](\\d{4})/); // DD-MM-YYYY or MM-DD-YYYY\n    if (m) {\n      const a = parseInt(m[1],10), b = parseInt(m[2],10);\n      // Heuristic: if both <=12, assume DD-MM-YYYY by default\n      const day = a; const month = b;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${day.toString().padStart(2,'0')}`;\n    }\n    m = text.match(/(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\s+(\\d{4})/i);\n    if (m) {\n      const month = monthNames.indexOf(m[2].toLowerCase()) !== -1 \n        ? monthNames.indexOf(m[2].toLowerCase()) + 1\n        : monthShort.indexOf(m[2].toLowerCase()) + 1;\n      return `${m[3]}-${month.toString().padStart(2,'0')}-${m[1].padStart(2,'0')}`;\n    }\n    return null;\n  };\n\n  const parseTob = (text) => {\n    let m = text.match(/(\\d{1,2}):(\\d{2})(?::(\\d{2}))?\\s*(am|pm)?/i);\n    if (!m) m = text.match(/(\\d{1,2})[\\.\\s](\\d{2})\\s*(am|pm)?/i);\n    if (m) {\n      let hour = parseInt(m[1],10);\n      const minute = m[2];\n      const sec = m[3] || '00';\n      const period = (m[4] || m[3]) || '';\n      if (/pm/i.test(period) && hour !== 12) hour += 12;\n      if (/am/i.test(period) && hour === 12) hour = 0;\n      if (hour >= 0 && hour <= 23) return `${hour.toString().padStart(2,'0')}:${minute}:${sec}`;\n    }\n    return null;\n  };\n\n  const parsePlace = (text) => {\n    const m = text.match(/(?:place|sthan|city|town|birth\\s*place|janm\\s*sthan|from|in)\\s*:?\\s*([a-zA-Z][a-zA-Z\\s,.'-]+)/i);\n    if (m) return m[1].trim();\n    // Fallback: single word or two words capitalized\n    const m2 = text.match(/^[a-zA-Z][a-zA-Z\\s'.-]{2,}$/);\n    if (m2) return m2[0].trim();\n    return null;\n  };\n\n  const isValidDate = (yyyyMmDd) => {\n    if (!yyyyMmDd) return false;\n    const m = yyyyMmDd.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!m) return false;\n    const d = new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`);\n    return !isNaN(d.getTime());\n  };\n\n  const isValidTime = (hhmmss) => /^(\\d{2}):(\\d{2}):(\\d{2})$/.test(hhmmss);\n\n  // Helper function to check if all birth details are collected\n  const isProfileComplete = () => {\n    return userProfile.name && userProfile.dob && userProfile.tob && userProfile.place;\n  };\n\n  // Helper function to generate Kundli and Chart\n  const generateKundli = async () => {\n    setIsGeneratingKundli(true);\n    setIsGeneratingChart(true);\n    setCurrentStep('generating');\n    \n    try {\n      const birthDetails = {\n        name: userProfile.name,\n        dob: userProfile.dob,\n        tob: userProfile.tob,\n        place: userProfile.place,\n        timezone: userProfile.timezone\n      };\n      \n      // Generate both chart and kundli data in parallel\n      const [chartResponse, kundliResponse] = await Promise.all([\n        astroBotAPI.generateChart(birthDetails),\n        astroBotAPI.generateKundli(birthDetails)\n      ]);\n      \n      if (chartResponse.success && chartResponse.chart_data) {\n        setChartData(chartResponse.chart_data);\n        setIsGeneratingChart(false);\n      }\n      \n      if (kundliResponse.success && kundliResponse.chart_data) {\n        setKundliData(kundliResponse.chart_data);\n        setCurrentStep('chart_generated');\n        \n        // Add Kundli generation success message with greeting and remedy mention\n        const successMessage = {\n          id: nextMessageId(),\n          text: `🎉 ${userProfile.name} ji, aapka Kundli chart taiyar hai! Main yahan hun aapki madad ke liye aur aapko astrology ke saath-saath zaroori upchar (remedies) bhi dunga. Aap koi bhi sawal puch sakte hain - grah ki sthiti, dasha, yog, ya koi bhi astrological prediction ke bare mein.`,\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setMessages(prev => [...prev, successMessage]);\n      } else {\n        throw new Error(kundliResponse.error || 'Kundli generation failed');\n      }\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      const errorMessage = {\n        id: nextMessageId(),\n        text: \"Sorry, Kundli generate karne mein koi problem aa rahi hai. Kripya dobara try karein ya contact karein.\",\n        sender: 'pandit',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsGeneratingKundli(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (inputText.trim()) {\n      const newMessage = {\n        id: nextMessageId(),\n        text: inputText,\n        sender: 'user',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      \n      setMessages([...messages, newMessage]);\n      const currentInput = inputText;\n      setInputText('');\n      \n      try {\n        // Show typing indicator\n        const typingMessage = {\n          id: nextMessageId(),\n          text: \"Pandit ji typing...\",\n          sender: 'pandit',\n          timestamp: new Date().toLocaleTimeString(),\n          isTyping: true\n        };\n        setIsBotTyping(true);\n        setMessages(prev => [...prev, typingMessage]);\n        \n        // Stepwise dialog\n        let botText = '';\n        if (currentStep === 'ask_name') {\n          // allow corrections like: name: Rajesh\n          let name = null;\n          const correction = currentInput.match(/^(?:name|naam)\\s*[:\\-]\\s*(.+)$/i);\n          if (correction) name = correction[1].trim();\n          if (!name) name = parseName(currentInput);\n          if (!name) {\n            botText = \"Kripya apna naam clear tarike se batayiye (e.g., Mera naam Anil hai).\";\n          } else {\n            const updated = { ...userProfile, name };\n            setUserProfile(updated);\n            setCurrentStep('ask_dob');\n            botText = `${name} ji, ab apni janm tithi batayiye (e.g., 15/05/1990 ya 15 May 1990).`;\n          }\n        } else if (currentStep === 'ask_dob') {\n          const dob = parseDob(currentInput);\n          if (!dob || !isValidDate(dob)) {\n            botText = \"Janm tithi samajh nahi aayi. Kripya format mein batayein: DD/MM/YYYY ya 15 May 1990.\";\n          } else {\n            const updated = { ...userProfile, dob };\n            setUserProfile(updated);\n            setCurrentStep('ask_tob');\n            botText = \"Shukriya. Ab apna janm samay batayiye (e.g., 2:30 PM ya 14:30).\";\n          }\n        } else if (currentStep === 'ask_tob') {\n          const tob = parseTob(currentInput);\n          if (!tob || !isValidTime(tob)) {\n            botText = \"Janm samay samajh nahi aaya. Kripya format mein batayein: HH:MM AM/PM ya 24-hour (e.g., 14:30).\";\n          } else {\n            const updated = { ...userProfile, tob };\n            setUserProfile(updated);\n            setCurrentStep('ask_place');\n            botText = \"Samay mil gaya. Ab apna janm sthan/city batayiye (e.g., Delhi, Mumbai).\";\n          }\n        } else if (currentStep === 'ask_place') {\n          const place = parsePlace(currentInput);\n          if (!place) {\n            botText = \"Janm sthan samajh nahi aaya. Kripya city ka naam batayein (e.g., Pune).\";\n          } else {\n            const updated = { ...userProfile, place };\n            setUserProfile(updated);\n            setCurrentStep('confirm_details');\n            botText = `Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType karein: 'yes' ya jis field ko change karna ho: 'change name: <naya naam>'`;\n          }\n        } else if (currentStep === 'confirm_details') {\n          if (/^y(es)?$/i.test(currentInput.trim())) {\n            botText = \"Bahut badiya! Main aapka Kundli chart generate kar raha hun...\";\n            setCurrentStep('generating');\n            // proceed without removing typing bubble\n        setMessages(prev => prev.filter(msg => !msg.isTyping).concat({\n          id: nextMessageId(),\n              text: botText,\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }));\n            await generateKundli();\n            return;\n          }\n          const change = currentInput.match(/^change\\s+(name|naam|dob|date|tob|time|samay|place|city|sthan)\\s*[:\\-]\\s*(.+)$/i);\n          if (change) {\n            const field = change[1].toLowerCase();\n            const value = change[2].trim();\n            const updated = { ...userProfile };\n            if (field === 'name' || field === 'naam') updated.name = value;\n            else if (field === 'dob' || field === 'date') {\n              const dob = parseDob(value);\n              if (dob && isValidDate(dob)) updated.dob = dob; else {\n                botText = \"Nayi DOB valid nahi hai. Example: 15/05/1990\";\n              }\n            } else if (field === 'tob' || field === 'time' || field === 'samay') {\n              const tob = parseTob(value);\n              if (tob && isValidTime(tob)) updated.tob = tob; else {\n                botText = \"Naya TOB valid nahi hai. Example: 2:30 PM ya 14:30\";\n              }\n            } else if (field === 'place' || field === 'city' || field === 'sthan') {\n              const place = parsePlace(value);\n              if (place) updated.place = place; else {\n                botText = \"Naya place samajh nahi aaya. Example: Jaipur\";\n              }\n            }\n            setUserProfile(updated);\n            if (!botText) {\n              botText = `Updated. Kripya confirm karein:\\n- Naam: ${updated.name}\\n- DOB: ${updated.dob}\\n- TOB: ${updated.tob}\\n- Place: ${updated.place}\\nType 'yes' ya 'change <field>: <value>'`;\n            }\n          } else {\n            botText = \"Kripya 'yes' type karein ya 'change <field>: <value>' batayein (e.g., change dob: 1990-05-15).\";\n          }\n        } else if (currentStep === 'chart_generated' || currentStep === 'chatting') {\n          // Regular chat with chart context\n          const response = await astroBotAPI.sendChatMessage(currentInput, chartData);\n          botText = response.response;\n          setCurrentStep('chatting');\n        } else if (currentStep === 'generating') {\n          botText = \"Chart generate ho raha hai, kripya wait karein...\";\n        }\n\n        // Smooth typing simulation with thoughtful delay for predictions (8-10 seconds)\n        const looksLikePrediction = /\\b(yog|shaadi|career|health|mangal|grah|kundli|prediction|yoga|marriage|job|business|future)\\b/i.test(botText || '');\n        const baseDelay = looksLikePrediction ? 8000 : 1200; // 8s+ for predictions, 1.2s for regular chat\n        const variableDelay = looksLikePrediction ? Math.min(2000, Math.floor((botText?.length || 0) / 15) * 80) : 500;\n        const delayMs = baseDelay + variableDelay; // Total 8-10 seconds for predictions\n        await new Promise(res => setTimeout(res, delayMs));\n        // Remove typing indicator and add botText\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          return [...withoutTyping, {\n            id: nextMessageId(),\n            text: botText,\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          }];\n        });\n        // Optionally add a gentle follow-up question to keep flow natural\n        if (currentStep === 'chatting' || currentStep === 'chart_generated') {\n          const followUps = [\n            \"Abhi aapke rishte ki baat chal rahi hai kya?\",\n            \"Kya aap kisi ko pasand karte ho?\",\n            \"Aapka career kis field mein hai?\",\n            \"Aapko apni health ke baare mein bhi jaana hai kya?\"\n          ];\n          const fupDelay = 1200 + Math.floor(Math.random() * 1200);\n          setTimeout(() => {\n            setMessages(prev => ([...prev, {\n              id: nextMessageId(),\n              text: followUps[Math.floor(Math.random() * followUps.length)],\n              sender: 'pandit',\n              timestamp: new Date().toLocaleTimeString()\n            }]));\n          }, fupDelay);\n        }\n        setIsBotTyping(false);\n        \n      } catch (error) {\n        console.error('Error sending message:', error);\n        \n        // Remove typing indicator and show error\n        setMessages(prev => {\n          const withoutTyping = prev.filter(msg => !msg.isTyping);\n          const errorResponse = {\n            id: nextMessageId(),\n            text: \"Sorry, main abhi online nahi hun. Kripya thoda baad try karein.\",\n            sender: 'pandit',\n            timestamp: new Date().toLocaleTimeString()\n          };\n          return [...withoutTyping, errorResponse];\n        });\n        setIsBotTyping(false);\n      }\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className={`expandable-chat-container ${isOpen ? 'expanded' : ''}`}>\n      {/* Chat Header */}\n      <div className=\"chat-header\">\n        <div className=\"pandit-info\">\n          <div className=\"pandit-avatar-small\">\n            <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n          </div>\n          <div className=\"pandit-details\">\n            <h3>Pandit ji</h3>\n            <span className=\"status\">Online</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"messages-container\">\n        {messages.map((message) => (\n          <div key={message.id} className={`message ${message.sender}`}>\n            {message.sender === 'pandit' && (\n              <div className=\"message-avatar\">\n                <img src={require('../assets/Astro_Avatar.png')} alt=\"Pandit ji\" />\n              </div>\n            )}\n            <div className=\"message-content\">\n              <div className=\"message-bubble\">\n                <p>{message.text}</p>\n                <span className=\"message-time\">{message.timestamp}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n        \n        {/* Kundli Chart Display */}\n        {chartData && (\n          <KundliChart \n            chartData={chartData} \n            onChartReady={() => {\n              // Chart is ready, no need for additional message\n              console.log('Chart loaded successfully');\n            }}\n          />\n        )}\n        \n        {/* Loading indicator for Kundli generation */}\n        {(isGeneratingKundli || isGeneratingChart) && (\n          <div className=\"kundli-loading\">\n            <div className=\"loading-spinner\"></div>\n            <p>🔮 Aapka Kundli chart generate ho raha hai... Kripya wait karein</p>\n          </div>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"input-container\">\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={handleKeyPress}\n            ref={inputRef}\n            placeholder={\n              currentStep === 'greeting' || currentStep === 'collecting_details'\n                ? \"Format: naam, DD/MM/YYYY, HH:MM, place (e.g., Rajesh, 15/05/1990, 14:30, Delhi)\"\n                : \"Apna sawal yahan likhein...\"\n            }\n            className=\"message-input\"\n            disabled={isGeneratingKundli || isBotTyping}\n          />\n          <button \n            onClick={handleSendMessage} \n            className=\"send-button\"\n            disabled={isGeneratingKundli || isBotTyping}\n          >\n            <svg viewBox=\"0 0 24 24\" className=\"send-icon\">\n              <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n              <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </button>\n          {(currentStep === 'confirm_details' || currentStep === 'chart_generated' || currentStep === 'chatting') && (\n            <button\n              onClick={() => {\n                setEditMode((prev) => !prev);\n                if (!editMode) {\n                  // entering edit mode: show current details\n                  const m = {\n                    id: nextMessageId(),\n                    text: `Edit mode enabled. Type: change name: <value> / change dob: <value> / change tob: <value> / change place: <value>. Then type 'save' to confirm.`,\n                    sender: 'pandit',\n                    timestamp: new Date().toLocaleTimeString()\n                  };\n                  setMessages((prev) => [...prev, m]);\n                }\n              }}\n              className=\"send-button\"\n              style={{ marginLeft: 8 }}\n            >\n              {editMode ? 'Done' : 'Edit details'}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpandableChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}