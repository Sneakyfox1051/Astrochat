{"ast":null,"code":"/**\n * AstroBot API Service\n * Handles all communication with the backend API\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass AstroBotAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Send a chat message to the backend\n   * @param {string} message - User message\n   * @param {Object} chartData - Optional chart data (for context)\n   * @returns {Promise<Object>} API response\n   */\n  async sendChatMessage(message, chartData = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message,\n          chart_data: chartData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending chat message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate Kundli chart\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Kundli data\n   */\n  async generateKundli(birthDetails) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/kundli`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(birthDetails)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate visual chart only\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Chart data\n   */\n  async generateChart(birthDetails) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/chart`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(birthDetails)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating chart:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze chart data\n   * @param {Object} chartData - Chart data to analyze\n   * @returns {Promise<Object>} Analysis result\n   */\n  async analyzeKundli(chartData) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chart_data: chartData\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get coordinates for a place\n   * @param {string} place - Place name\n   * @returns {Promise<Object>} Coordinates data\n   */\n  async getCoordinates(place) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/coordinates/${encodeURIComponent(place)}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if the backend is healthy\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export API instance\nconst astroBotAPI = new AstroBotAPI();\nexport default astroBotAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AstroBotAPI","constructor","baseURL","sendChatMessage","message","chartData","response","fetch","method","headers","body","JSON","stringify","chart_data","ok","Error","status","json","error","console","generateKundli","birthDetails","generateChart","analyzeKundli","getCoordinates","place","encodeURIComponent","checkHealth","astroBotAPI"],"sources":["D:/Downloads/astro-main/frontend/src/services/api.js"],"sourcesContent":["/**\n * AstroBot API Service\n * Handles all communication with the backend API\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass AstroBotAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Send a chat message to the backend\n   * @param {string} message - User message\n   * @param {Object} chartData - Optional chart data (for context)\n   * @returns {Promise<Object>} API response\n   */\n  async sendChatMessage(message, chartData = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: message,\n          chart_data: chartData\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error sending chat message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate Kundli chart\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Kundli data\n   */\n  async generateKundli(birthDetails) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/kundli`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(birthDetails)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate visual chart only\n   * @param {Object} birthDetails - Birth details\n   * @returns {Promise<Object>} Chart data\n   */\n  async generateChart(birthDetails) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/chart`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(birthDetails)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating chart:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze chart data\n   * @param {Object} chartData - Chart data to analyze\n   * @returns {Promise<Object>} Analysis result\n   */\n  async analyzeKundli(chartData) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chart_data: chartData\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing Kundli:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get coordinates for a place\n   * @param {string} place - Place name\n   * @returns {Promise<Object>} Coordinates data\n   */\n  async getCoordinates(place) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/coordinates/${encodeURIComponent(place)}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if the backend is healthy\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/health`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export API instance\nconst astroBotAPI = new AstroBotAPI();\nexport default astroBotAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}